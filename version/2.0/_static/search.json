[
    {
        "objectID": "usage/cosim",
        "href": "usage/cosim.html#white-box-simulation-with-scade-suite",
        "title": "White-Box Simulation with SCADE Suite",
        "section": "White-Box Simulation with SCADE Suite",
        "text": "When the Enable co-simulation option is set, the wrapper produces\nadditional code to connect to the SCADE Simulator, based on the ssmproxy.py\nlibrary file, which is copied to the target directory for convenience.\nIt relies on the C API for Co-Simulation:\nCf. the Using Simulation API for Co-Simulation section of the documentation\nfor details.\nThe call_cycle method presents two additional inputs:\nrefresh: bool = True: Whether to refresh the SCADE Suite Simulation\ninterface.\ndebug: bool = False: Whether to pause the SCADE Simulator and wait for its\nGo button being pressed.\nTo use the co-simulation, you must build your model twice,\nusing the same root operator:\nUsing the target Proxy for Python with the Enable co-simulation\noption set.\nUsing the configuration Simulation.\nThe Python class for the root operator has a parameter cosim: bool = True.\nWhen the parameter is set to False, the co-simulation is deactivated:\nYou can alternate both modes without rebuilding the proxy.\nThe co-simulation requires several parameters that are initialized as follows\nby default:\nscade_dir: str: Path of the SCADE bin directory.\nDefault: The directory of the tool used to produce the Python proxy,\nfor example r\"C:\\Program Files\\ANSYS Inc\\v242\\SCADE\\SCADE\\bin\".\nhost: str: Hostname to connect with to run the SCADE Simulator.\nDefault: “127.0.0.1”\nproject: str: Path of the SCADE Suite project.\nDefault: Path of the project used to build the Python proxy.\nconfiguration: str: Name of the configuration to use by the SCADE\nSimulator.\nDefault: \"Simulation\"\nroot: str: Path of the root operator.\nDefault: Root operator of the configuration used to produce the Python proxy.\nport: int: Port to use for the communication.\nDefault: Port number specified in the project’s Simulation properties, 64064 by default.\nUse the set_cosim_environment function, defined in the Python proxy,\nto override any of these parameters before creating the instance of the\nroot operator.\nIt is possible to create your own instance of SCADE Simulator proxy,\nthe SsmProxy class, including using a derived class.\nThis allows using all the capabilities of the API for Co-Simulation to tune\nthe co-simulation with respect to your environment.\nThe client script must create an instance of this class, and declare it using\nthe set_ssm_proxy function. This must be done before creating the instance\nof the Python proxy for the root operator."
    },
    {
        "objectID": "usage/cosim",
        "href": "usage/cosim.html#usage",
        "title": "White-Box Simulation with SCADE Suite > Usage",
        "section": "Usage",
        "text": "When the Enable co-simulation option is set, the wrapper produces\nadditional code to connect to the SCADE Simulator, based on the ssmproxy.py\nlibrary file, which is copied to the target directory for convenience.\nIt relies on the C API for Co-Simulation:\nCf. the Using Simulation API for Co-Simulation section of the documentation\nfor details.\nThe call_cycle method presents two additional inputs:\nrefresh: bool = True: Whether to refresh the SCADE Suite Simulation\ninterface.\ndebug: bool = False: Whether to pause the SCADE Simulator and wait for its\nGo button being pressed.\nTo use the co-simulation, you must build your model twice,\nusing the same root operator:\nUsing the target Proxy for Python with the Enable co-simulation\noption set.\nUsing the configuration Simulation.\nThe Python class for the root operator has a parameter cosim: bool = True.\nWhen the parameter is set to False, the co-simulation is deactivated:\nYou can alternate both modes without rebuilding the proxy."
    },
    {
        "objectID": "usage/cosim",
        "href": "usage/cosim.html#basic-customization",
        "title": "White-Box Simulation with SCADE Suite > Basic Customization",
        "section": "Basic Customization",
        "text": "The co-simulation requires several parameters that are initialized as follows\nby default:\nscade_dir: str: Path of the SCADE bin directory.\nDefault: The directory of the tool used to produce the Python proxy,\nfor example r\"C:\\Program Files\\ANSYS Inc\\v242\\SCADE\\SCADE\\bin\".\nhost: str: Hostname to connect with to run the SCADE Simulator.\nDefault: “127.0.0.1”\nproject: str: Path of the SCADE Suite project.\nDefault: Path of the project used to build the Python proxy.\nconfiguration: str: Name of the configuration to use by the SCADE\nSimulator.\nDefault: \"Simulation\"\nroot: str: Path of the root operator.\nDefault: Root operator of the configuration used to produce the Python proxy.\nport: int: Port to use for the communication.\nDefault: Port number specified in the project’s Simulation properties, 64064 by default.\nUse the set_cosim_environment function, defined in the Python proxy,\nto override any of these parameters before creating the instance of the\nroot operator."
    },
    {
        "objectID": "usage/cosim",
        "href": "usage/cosim.html#advanced-customization",
        "title": "White-Box Simulation with SCADE Suite > Advanced Customization",
        "section": "Advanced Customization",
        "text": "It is possible to create your own instance of SCADE Simulator proxy,\nthe SsmProxy class, including using a derived class.\nThis allows using all the capabilities of the API for Co-Simulation to tune\nthe co-simulation with respect to your environment.\nThe client script must create an instance of this class, and declare it using\nthe set_ssm_proxy function. This must be done before creating the instance\nof the Python proxy for the root operator."
    },
    {
        "objectID": "index",
        "href": "index.html#ansys-scade-python-wrapper",
        "title": "Ansys SCADE Python Wrapper",
        "section": "Ansys SCADE Python Wrapper",
        "text": "This tool provides a Python proxy to a SCADE Suite or Scade One application.\nIt allows running the application in regular batch mode, or using\nSCADE Suite white box co-simulation, through SsmSlaveLib.c services.\nThe package is made of the following components:\nSCADE Suite (2021 R2 and greater)\nSCADE Suite Code Generator extension\nSCADE Suite Custom Extension: Settings page for the wrapper\nRefer to the Section Generating Integration Code from SCADE Suite, in the\ndocument SCADE Products API Resources of the SCADE Suite documentation,\nfor a complete reference of SCADE Code Generator extensions, also known as\nwrappers.\nScade One (2024 R2)\nCommand-line tool\ngenindex\nsearch"
    },
    {
        "objectID": "index",
        "href": "index.html#contents",
        "title": "Ansys SCADE Python Wrapper > Contents",
        "section": "Contents",
        "text": ""
    },
    {
        "objectID": "index",
        "href": "index.html#indices-and-tables",
        "title": "Ansys SCADE Python Wrapper > Indices and tables",
        "section": "Indices and tables",
        "text": "genindex\nsearch"
    },
    {
        "objectID": "usage/display",
        "href": "usage/display.html#graphical-panels",
        "title": "Graphical panels",
        "section": "Graphical panels",
        "text": "The support of SCADE Display or SCADE Rapid Prototyper is possible and is\npartially automated: The SCADE Display DLLs are built and loaded at run time,\nand the DLL export all the required functions to access the displays.\nHowever, the Python ctype structures corresponding to the layers’ contexts\nmust be written manually, for now.\nThe graphical panels are accessed independently from Python and thus,\nexisting mappings between SCADE Suite and SCADE Display are not considered.\nRationale: Although the proxy considers a single instance of each\ngraphical panel, the current design allows several instances of SCADE\nroot operators: The mapping can’t be applied.\nThe wrapper generates the file sdy_xxx.py where xxx is the name of the\nmodule generated for SCADE Suite. This file defines one global variable\nsdy_yyy per graphical panel Yyy with the following members:\nreset(): Reset the graphical panel, automatically called when the Python\nmodule is imported\ndraw(): Render the image\nlockio(): Lock the contexts before accessing any I/O\nunlockio(): Release the lock on the contexts\ncancelled() -> bool: Return True when the window is closed\nOne member per layer in the graphical panels, corresponding to the contexts:\nThe name of the variable is the name of the layer.\nThe type of these contexts must be written manually, in a file called\nusr_xxx.py.\nThe class defining these contexts must inherit from SdyLayer, defined in\nthe sdyproxy.py resource file and must be named XxxLayer where Xxx\nis the name of the corresponding layer.\nConsider a SCADE Suite project application.etp containing a\nSCADE Display project with a graphical specification Panel.sgfx defining\na layer Symbology with the following interface:\nVariable\nType\nactive\nbool\nspeed\nfloat64\nSCADE KCG Display generates the following C context:\nYou must provide the corresponding Python structure in usr_application.py:\nNo consistency check is performed between the structure you define and the\none generated by SCADE Display KCG.\nThe Python code to access the graphical panel is rather straightforward:\n/* Context type */\ntypedef struct SDY1_Panel_typ_Symbology_ {\n  /* ------------------------- inputs --------------------------- */\n  SGLbool active;\n  SGLdouble speed;\n} SDY1_Panel_typ_Symbology;\nimport ctypes\nfrom sdyproxy import SdyLayer\nclass SymbologyLayer(SdyLayer):\n    _fields_ = [\n        ('active', ctypes.c_uint8),  # provide the C type corresponding to SGLbool\n        ('speed', ctypes.c_double),\n    ]\nfrom sdy_application import sdy_panel\n...\n# run until the window is closed\nwhile not sdy_panel.cancelled():\n    ...\n    active = True\n    speed = 42\n    ...\n    # update the display\n    sdy_panel.lockio()\n    sdy_panel.Symbology.active = active\n    sdy_panel.Symbology.speed = speed\n    sdy_panel.unlockio()\n    sdy_panel.draw()\n    ..."
    },
    {
        "objectID": "usage/display",
        "href": "usage/display.html#overview",
        "title": "Graphical panels > Overview",
        "section": "Overview",
        "text": "The support of SCADE Display or SCADE Rapid Prototyper is possible and is\npartially automated: The SCADE Display DLLs are built and loaded at run time,\nand the DLL export all the required functions to access the displays.\nHowever, the Python ctype structures corresponding to the layers’ contexts\nmust be written manually, for now.\nThe graphical panels are accessed independently from Python and thus,\nexisting mappings between SCADE Suite and SCADE Display are not considered.\nRationale: Although the proxy considers a single instance of each\ngraphical panel, the current design allows several instances of SCADE\nroot operators: The mapping can’t be applied."
    },
    {
        "objectID": "usage/display",
        "href": "usage/display.html#usage",
        "title": "Graphical panels > Usage",
        "section": "Usage",
        "text": "The wrapper generates the file sdy_xxx.py where xxx is the name of the\nmodule generated for SCADE Suite. This file defines one global variable\nsdy_yyy per graphical panel Yyy with the following members:\nreset(): Reset the graphical panel, automatically called when the Python\nmodule is imported\ndraw(): Render the image\nlockio(): Lock the contexts before accessing any I/O\nunlockio(): Release the lock on the contexts\ncancelled() -> bool: Return True when the window is closed\nOne member per layer in the graphical panels, corresponding to the contexts:\nThe name of the variable is the name of the layer.\nThe type of these contexts must be written manually, in a file called\nusr_xxx.py.\nThe class defining these contexts must inherit from SdyLayer, defined in\nthe sdyproxy.py resource file and must be named XxxLayer where Xxx\nis the name of the corresponding layer."
    },
    {
        "objectID": "usage/display",
        "href": "usage/display.html#example",
        "title": "Graphical panels > Example",
        "section": "Example",
        "text": "Consider a SCADE Suite project application.etp containing a\nSCADE Display project with a graphical specification Panel.sgfx defining\na layer Symbology with the following interface:\nVariable\nType\nactive\nbool\nspeed\nfloat64\nSCADE KCG Display generates the following C context:\nYou must provide the corresponding Python structure in usr_application.py:\nNo consistency check is performed between the structure you define and the\none generated by SCADE Display KCG.\nThe Python code to access the graphical panel is rather straightforward:\n/* Context type */\ntypedef struct SDY1_Panel_typ_Symbology_ {\n  /* ------------------------- inputs --------------------------- */\n  SGLbool active;\n  SGLdouble speed;\n} SDY1_Panel_typ_Symbology;\nimport ctypes\nfrom sdyproxy import SdyLayer\nclass SymbologyLayer(SdyLayer):\n    _fields_ = [\n        ('active', ctypes.c_uint8),  # provide the C type corresponding to SGLbool\n        ('speed', ctypes.c_double),\n    ]\nfrom sdy_application import sdy_panel\n...\n# run until the window is closed\nwhile not sdy_panel.cancelled():\n    ...\n    active = True\n    speed = 42\n    ...\n    # update the display\n    sdy_panel.lockio()\n    sdy_panel.Symbology.active = active\n    sdy_panel.Symbology.speed = speed\n    sdy_panel.unlockio()\n    sdy_panel.draw()\n    ..."
    },
    {
        "objectID": "usage/kcg",
        "href": "usage/kcg.html#usage-with-scade-suite",
        "title": "Usage with SCADE Suite",
        "section": "Usage with SCADE Suite",
        "text": "Select the target Proxy for Python in the Code Integration tab.\nThe settings page Python is visible when the target is selected:\nModule name (default $(project_name)): Name of the Python proxy.\nProvide either a name or use one of the following macros:\n$(project_name): aaa_BbbCcc –> aaa_bbb_ccc\n$(ProjectName): aaa_BbbCcc –> AaaBbbCcc\n$(PROJECT_NAME): aaa_BbbCcc –> AAA_BBB_CCC\n$(projectname): aaa_BbbCcc –> aaa_BbbCcc (unchanged)\nEnable co-simulation (default false): When selected, the Python proxy\ncontains additional instructions to open a SCADE Simulator session and\nautomatically redirects the changes to the inputs and the calls to the\ncyclic function.\nkcg_size (default int64): Corresponding C type for kcg_size,\nwhich is defined as int by default in kcg_types.h.\nkcg_false (default 0): Value of kcg_false.\nkcg_true (default 1): Value of kcg_true.\nBuild the application using the Code Generator target Proxy for Python,\nas described in the former section.\nThis produces a DLL and its Python interface.\nThe implementation of the generated module relies on the ctypes module.\nThis is important to know its usage to access I/Os of complex types,\nfor example structures and arrays."
    },
    {
        "objectID": "usage/kcg",
        "href": "usage/kcg.html#settings",
        "title": "Usage with SCADE Suite > Settings",
        "section": "Settings",
        "text": "Select the target Proxy for Python in the Code Integration tab.\nThe settings page Python is visible when the target is selected:\nModule name (default $(project_name)): Name of the Python proxy.\nProvide either a name or use one of the following macros:\n$(project_name): aaa_BbbCcc –> aaa_bbb_ccc\n$(ProjectName): aaa_BbbCcc –> AaaBbbCcc\n$(PROJECT_NAME): aaa_BbbCcc –> AAA_BBB_CCC\n$(projectname): aaa_BbbCcc –> aaa_BbbCcc (unchanged)\nEnable co-simulation (default false): When selected, the Python proxy\ncontains additional instructions to open a SCADE Simulator session and\nautomatically redirects the changes to the inputs and the calls to the\ncyclic function.\nkcg_size (default int64): Corresponding C type for kcg_size,\nwhich is defined as int by default in kcg_types.h.\nkcg_false (default 0): Value of kcg_false.\nkcg_true (default 1): Value of kcg_true."
    },
    {
        "objectID": "usage/kcg",
        "href": "usage/kcg.html#code-generationbuild",
        "title": "Usage with SCADE Suite > Code Generation/Build",
        "section": "Code Generation/Build",
        "text": "Build the application using the Code Generator target Proxy for Python,\nas described in the former section.\nThis produces a DLL and its Python interface.\nThe implementation of the generated module relies on the ctypes module.\nThis is important to know its usage to access I/Os of complex types,\nfor example structures and arrays."
    },
    {
        "objectID": "usage/index",
        "href": "usage/index.html#usage",
        "title": "Usage",
        "section": "Usage",
        "text": ""
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in\nContributing\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to Ansys SCADE Python Wrapper.\nThe following contribution information is specific to Ansys SCADE Python Wrapper.\nInstalling Ansys SCADE Python Wrapper in developer mode allows you to modify the\nsource and enhance it.\nClone the ansys-scade-python-wrapper repository:\nAccess the scade-python-wrapper directory where the repository has been cloned:\nCreate a clean Python 3.10 environment and activate it:\nYou should use the interpreter delivered with Ansys SCADE. For example,\nC:\\Program Files\\ANSYS Inc\\v241\\SCADE\\contrib\\Python310\\python.exe.\nMake sure that you have the latest required build system, documentation, testing,\nand CI tools:\nInstall the project in editable mode:\nUse tox to verify your development installation:\nAnsys SCADE Python Wrapper uses tox for testing. This tool allows you to\nautomate common development tasks (similar to Makefile), but it is oriented\ntowards Python development.\nWhile Makefile has rules, tox has environments. In fact, tox creates its\nown virtual environment so that anything being tested is isolated from the project\nto guarantee the project’s integrity.\nThe following tox commands are provided:\ntox -e style: Checks for coding style quality.\ntox -e py: Checks for unit tests.\ntox -e py-coverage: Checks for unit testing and code coverage.\ntox -e doc: Checks for the documentation-building process.\nIf required, from the command line, you can call style commands like\nruff. You can also call unit testing commands like pytest.\nHowever, running these commands does not guarantee that your project is being tested in an\nisolated environment, which is the reason why tools like tox exist.\nAnsys SCADE Python Wrapper follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys developer’s guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run these commands:\nYou can also install this as a pre-commit hook by running this command:\nThis way, it’s not possible for you to push code that fails the style checks:\nFor building documentation, you can run the usual rules provided in the\nSphinx make file. Here are some examples:\nHowever, the recommended way of checking documentation integrity is to use\ntox:\nAnsys SCADE Python Wrapper needs to be registered to SCADE for integration testing.\nIndeed, the generation modules are called from a SCADE code generator session.\nIt is not possible to reuse the virtual environment setup for the repository.\nYou must install the package in an environment accessible by SCADE, for\nexample its own Python distribution, although this is not advised,\nor the Python 3.10 user distribution:\nYou can reuse any <install>\\SCADE\\contrib\\Python310\\python.exe\nor Python 3.10 installation on your computer.\nIf you are using Ansys SCADE 2024 R2 or below, you must perform one additional\nstep, to install a registration file in %APPDATA%\\SCADE\\Customize:\nThe .\\tests\\Debug\\debug.py script uses internal SCADE Code Generator entry points\nto start a debug session for the scripts.\nYou must use the Python 3.10 environment delivered with SCADE, located in\n<install>\\contrib\\Python310.\nFor example:\nC:\\Program Files\\ANSYS Inc\\v251\\SCADE\\contrib\\Python310.\nConfigure PYTHONPATH to refer to <install>\\SCADE\\bin and\n<install>\\SCADE\\APIs\\Python\\lib. For example:\nRefer to .\\tests\\Debug\\debug.py for its command line parameters.\nThese are manual tests. Refer to the test procedures, contained in each test\ndirectory as readme files.\nOnce the test or debug sessions are completed, you may uninstall the package\nas follows:\nIf you are using Ansys SCADE 2024 R2 or below, you should remove the\nregistration file:\nIf you would like to create either source or wheel files, start by installing\nthe building requirements and then executing the build module:\nUse the Ansys SCADE Python Wrapper Issues\npage to submit questions, report bugs, and request new features. When possible, use\nthese templates:\nBug, problem, error: For filing a bug report\nDocumentation error: For requesting modifications to the documentation\nAdding an example: For proposing a new example\nNew feature: For requesting enhancements to the code\nIf your issue does not fit into one of these template categories, click\nthe link for opening a blank issue.\nTo reach the project support team, email pyansys.core@ansys.com.\ngit clone https://github.com/ansys/scade-python-wrapper\ncd scade-python-wrapper\n# Create a virtual environment\npython -m venv .venv\n\n# Activate it in a POSIX system\nsource .venv/bin/activate\n\n# Activate it in Windows CMD environment\n.venv\\Scripts\\activate.bat\n\n# Activate it in Windows Powershell\n.venv\\Scripts\\Activate.ps1\npython -m pip install -U pip     # Upgrading pip\npython -m pip install tox        # Installing tox (optional)\npython -m pip install .[build]   # for building the wheels\npython -m pip install .[tests]   # for testing the package\npython -m pip install .[doc]     # for building the documentation\npython -m pip install --editable .\ntox\npip install pre-commit\npre-commit run --all-files\npre-commit install\n$ pre-commit install\n$ git commit -am \"added my cool feature\"\nAdd License Headers......................................................Passed\nruff.....................................................................Passed\ncodespell................................................................Passed\ncheck for merge conflicts................................................Passed\ndebug statements (python)................................................Passed\ncheck yaml...............................................................Passed\ntrim trailing whitespace.................................................Passed\n#  build and view the doc from the POSIX system\nmake -C doc/ html && your_browser_name doc/html/index.html\n\n# build and view the doc from a Windows environment\n.\\doc\\make.bat clean\n.\\doc\\make.bat html\nstart .\\doc\\_build\\html\\index.html\ntox -e doc-html && your_browser_name .tox/doc_out/index.html\n<python310.exe> -m pip install --user --editable .\n<python310.exe>  -m ansys.scade.python_wrapper.register\nset PYTHONPATH=C:\\Program Files\\ANSYS Inc\\v251\\SCADE\\SCADE\\bin;C:\\Program Files\\ANSYS Inc\\v251\\SCADE\\SCADE\\APIs\\Python\\lib\n<python310.exe> -m pip uninstall ansys-scade-python-wrapper\ndel %APPDATA%\\SCADE\\Customize\\python_wrapper.srg\npython -m pip install .[build]\npython -m build\npython -m twine check dist/*"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#install-in-developer-mode",
        "title": "Contribute > Install in developer mode",
        "section": "Install in developer mode",
        "text": "Installing Ansys SCADE Python Wrapper in developer mode allows you to modify the\nsource and enhance it.\nClone the ansys-scade-python-wrapper repository:\nAccess the scade-python-wrapper directory where the repository has been cloned:\nCreate a clean Python 3.10 environment and activate it:\nYou should use the interpreter delivered with Ansys SCADE. For example,\nC:\\Program Files\\ANSYS Inc\\v241\\SCADE\\contrib\\Python310\\python.exe.\nMake sure that you have the latest required build system, documentation, testing,\nand CI tools:\nInstall the project in editable mode:\nUse tox to verify your development installation:\ngit clone https://github.com/ansys/scade-python-wrapper\ncd scade-python-wrapper\n# Create a virtual environment\npython -m venv .venv\n\n# Activate it in a POSIX system\nsource .venv/bin/activate\n\n# Activate it in Windows CMD environment\n.venv\\Scripts\\activate.bat\n\n# Activate it in Windows Powershell\n.venv\\Scripts\\Activate.ps1\npython -m pip install -U pip     # Upgrading pip\npython -m pip install tox        # Installing tox (optional)\npython -m pip install .[build]   # for building the wheels\npython -m pip install .[tests]   # for testing the package\npython -m pip install .[doc]     # for building the documentation\npython -m pip install --editable .\ntox"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#unit-test",
        "title": "Contribute > Unit test",
        "section": "Unit test",
        "text": "Ansys SCADE Python Wrapper uses tox for testing. This tool allows you to\nautomate common development tasks (similar to Makefile), but it is oriented\ntowards Python development.\nWhile Makefile has rules, tox has environments. In fact, tox creates its\nown virtual environment so that anything being tested is isolated from the project\nto guarantee the project’s integrity.\nThe following tox commands are provided:\ntox -e style: Checks for coding style quality.\ntox -e py: Checks for unit tests.\ntox -e py-coverage: Checks for unit testing and code coverage.\ntox -e doc: Checks for the documentation-building process.\nIf required, from the command line, you can call style commands like\nruff. You can also call unit testing commands like pytest.\nHowever, running these commands does not guarantee that your project is being tested in an\nisolated environment, which is the reason why tools like tox exist.\nAnsys SCADE Python Wrapper follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys developer’s guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run these commands:\nYou can also install this as a pre-commit hook by running this command:\nThis way, it’s not possible for you to push code that fails the style checks:\npip install pre-commit\npre-commit run --all-files\npre-commit install\n$ pre-commit install\n$ git commit -am \"added my cool feature\"\nAdd License Headers......................................................Passed\nruff.....................................................................Passed\ncodespell................................................................Passed\ncheck for merge conflicts................................................Passed\ndebug statements (python)................................................Passed\ncheck yaml...............................................................Passed\ntrim trailing whitespace.................................................Passed"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#use-tox",
        "title": "Contribute > Use tox",
        "section": "Use tox",
        "text": "While Makefile has rules, tox has environments. In fact, tox creates its\nown virtual environment so that anything being tested is isolated from the project\nto guarantee the project’s integrity.\nThe following tox commands are provided:\ntox -e style: Checks for coding style quality.\ntox -e py: Checks for unit tests.\ntox -e py-coverage: Checks for unit testing and code coverage.\ntox -e doc: Checks for the documentation-building process."
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#use-raw-testing",
        "title": "Contribute > Use raw testing",
        "section": "Use raw testing",
        "text": "If required, from the command line, you can call style commands like\nruff. You can also call unit testing commands like pytest.\nHowever, running these commands does not guarantee that your project is being tested in an\nisolated environment, which is the reason why tools like tox exist."
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#use-pre-commit",
        "title": "Contribute > Use pre-commit",
        "section": "Use pre-commit",
        "text": "Ansys SCADE Python Wrapper follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys developer’s guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run these commands:\nYou can also install this as a pre-commit hook by running this command:\nThis way, it’s not possible for you to push code that fails the style checks:\npip install pre-commit\npre-commit run --all-files\npre-commit install\n$ pre-commit install\n$ git commit -am \"added my cool feature\"\nAdd License Headers......................................................Passed\nruff.....................................................................Passed\ncodespell................................................................Passed\ncheck for merge conflicts................................................Passed\ndebug statements (python)................................................Passed\ncheck yaml...............................................................Passed\ntrim trailing whitespace.................................................Passed"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#build-documentation",
        "title": "Contribute > Build documentation",
        "section": "Build documentation",
        "text": "For building documentation, you can run the usual rules provided in the\nSphinx make file. Here are some examples:\nHowever, the recommended way of checking documentation integrity is to use\ntox:\n#  build and view the doc from the POSIX system\nmake -C doc/ html && your_browser_name doc/html/index.html\n\n# build and view the doc from a Windows environment\n.\\doc\\make.bat clean\n.\\doc\\make.bat html\nstart .\\doc\\_build\\html\\index.html\ntox -e doc-html && your_browser_name .tox/doc_out/index.html"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#debug-and-integration-test",
        "title": "Contribute > Debug and integration test",
        "section": "Debug and integration test",
        "text": "Ansys SCADE Python Wrapper needs to be registered to SCADE for integration testing.\nIndeed, the generation modules are called from a SCADE code generator session.\nIt is not possible to reuse the virtual environment setup for the repository.\nYou must install the package in an environment accessible by SCADE, for\nexample its own Python distribution, although this is not advised,\nor the Python 3.10 user distribution:\nYou can reuse any <install>\\SCADE\\contrib\\Python310\\python.exe\nor Python 3.10 installation on your computer.\nIf you are using Ansys SCADE 2024 R2 or below, you must perform one additional\nstep, to install a registration file in %APPDATA%\\SCADE\\Customize:\nThe .\\tests\\Debug\\debug.py script uses internal SCADE Code Generator entry points\nto start a debug session for the scripts.\nYou must use the Python 3.10 environment delivered with SCADE, located in\n<install>\\contrib\\Python310.\nFor example:\nC:\\Program Files\\ANSYS Inc\\v251\\SCADE\\contrib\\Python310.\nConfigure PYTHONPATH to refer to <install>\\SCADE\\bin and\n<install>\\SCADE\\APIs\\Python\\lib. For example:\nRefer to .\\tests\\Debug\\debug.py for its command line parameters.\nThese are manual tests. Refer to the test procedures, contained in each test\ndirectory as readme files.\nOnce the test or debug sessions are completed, you may uninstall the package\nas follows:\nIf you are using Ansys SCADE 2024 R2 or below, you should remove the\nregistration file:\n<python310.exe> -m pip install --user --editable .\n<python310.exe>  -m ansys.scade.python_wrapper.register\nset PYTHONPATH=C:\\Program Files\\ANSYS Inc\\v251\\SCADE\\SCADE\\bin;C:\\Program Files\\ANSYS Inc\\v251\\SCADE\\SCADE\\APIs\\Python\\lib\n<python310.exe> -m pip uninstall ansys-scade-python-wrapper\ndel %APPDATA%\\SCADE\\Customize\\python_wrapper.srg"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#install-in-user-mode",
        "title": "Contribute > Install in user mode",
        "section": "Install in user mode",
        "text": "It is not possible to reuse the virtual environment setup for the repository.\nYou must install the package in an environment accessible by SCADE, for\nexample its own Python distribution, although this is not advised,\nor the Python 3.10 user distribution:\nYou can reuse any <install>\\SCADE\\contrib\\Python310\\python.exe\nor Python 3.10 installation on your computer.\nIf you are using Ansys SCADE 2024 R2 or below, you must perform one additional\nstep, to install a registration file in %APPDATA%\\SCADE\\Customize:\n<python310.exe> -m pip install --user --editable .\n<python310.exe>  -m ansys.scade.python_wrapper.register"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#debug",
        "title": "Contribute > Debug",
        "section": "Debug",
        "text": "The .\\tests\\Debug\\debug.py script uses internal SCADE Code Generator entry points\nto start a debug session for the scripts.\nYou must use the Python 3.10 environment delivered with SCADE, located in\n<install>\\contrib\\Python310.\nFor example:\nC:\\Program Files\\ANSYS Inc\\v251\\SCADE\\contrib\\Python310.\nConfigure PYTHONPATH to refer to <install>\\SCADE\\bin and\n<install>\\SCADE\\APIs\\Python\\lib. For example:\nRefer to .\\tests\\Debug\\debug.py for its command line parameters.\nset PYTHONPATH=C:\\Program Files\\ANSYS Inc\\v251\\SCADE\\SCADE\\bin;C:\\Program Files\\ANSYS Inc\\v251\\SCADE\\SCADE\\APIs\\Python\\lib"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#run-the-integration-tests",
        "title": "Contribute > Run the integration tests",
        "section": "Run the integration tests",
        "text": "These are manual tests. Refer to the test procedures, contained in each test\ndirectory as readme files."
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#uninstall",
        "title": "Contribute > Uninstall",
        "section": "Uninstall",
        "text": "Once the test or debug sessions are completed, you may uninstall the package\nas follows:\nIf you are using Ansys SCADE 2024 R2 or below, you should remove the\nregistration file:\n<python310.exe> -m pip uninstall ansys-scade-python-wrapper\ndel %APPDATA%\\SCADE\\Customize\\python_wrapper.srg"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#distribute",
        "title": "Contribute > Distribute",
        "section": "Distribute",
        "text": "If you would like to create either source or wheel files, start by installing\nthe building requirements and then executing the build module:\npython -m pip install .[build]\npython -m build\npython -m twine check dist/*"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the Ansys SCADE Python Wrapper Issues\npage to submit questions, report bugs, and request new features. When possible, use\nthese templates:\nBug, problem, error: For filing a bug report\nDocumentation error: For requesting modifications to the documentation\nAdding an example: For proposing a new example\nNew feature: For requesting enhancements to the code\nIf your issue does not fit into one of these template categories, click\nthe link for opening a blank issue.\nTo reach the project support team, email pyansys.core@ansys.com."
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "To use Ansys SCADE Python Wrapper, you must have a valid license for Ansys SCADE.\nFor information on getting a licensed copy, see the\nAnsys SCADE Suite\npage on the Ansys website.\nThe ansys-scade-python-wrapper package supports only the versions of Python delivered with\nAnsys SCADE, starting from 2021 R2:\n2021 R2 through 2023 R1: Python 3.7\n2023 R2 and later: Python 3.10\nThe following steps are for installing Ansys SCADE Python Wrapper in user mode.\nIf you want to contribute to Ansys SCADE Python Wrapper,\nsee contribute_scade_python-wrapper for the steps for installing in developer mode.\nBefore installing Ansys SCADE Python Wrapper in user mode, run this command to ensure that\nyou have the latest version of pip:\nInstall Ansys SCADE Python Wrapper with this command:\nFor Ansys SCADE releases 2024 R2 and below, complete the installation with\nthese commands:\nThis additional step is not required when installing the package with\nAnsys SCADE Extension Manager.\npython -m pip install -U pip\npython -m pip install --user ansys-scade-python-wrapper\npython -m ansys.scade.wux.register\npython -m ansys.scade.python_wrapper.register"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#requirements",
        "title": "Getting started > Requirements",
        "section": "Requirements",
        "text": "The ansys-scade-python-wrapper package supports only the versions of Python delivered with\nAnsys SCADE, starting from 2021 R2:\n2021 R2 through 2023 R1: Python 3.7\n2023 R2 and later: Python 3.10"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#install-in-user-mode",
        "title": "Getting started > Install in user mode",
        "section": "Install in user mode",
        "text": "The following steps are for installing Ansys SCADE Python Wrapper in user mode.\nIf you want to contribute to Ansys SCADE Python Wrapper,\nsee contribute_scade_python-wrapper for the steps for installing in developer mode.\nBefore installing Ansys SCADE Python Wrapper in user mode, run this command to ensure that\nyou have the latest version of pip:\nInstall Ansys SCADE Python Wrapper with this command:\nFor Ansys SCADE releases 2024 R2 and below, complete the installation with\nthese commands:\nThis additional step is not required when installing the package with\nAnsys SCADE Extension Manager.\npython -m pip install -U pip\npython -m pip install --user ansys-scade-python-wrapper\npython -m ansys.scade.wux.register\npython -m ansys.scade.python_wrapper.register"
    },
    {
        "objectID": "usage/swancg",
        "href": "usage/swancg.html#usage-with-scade-one",
        "title": "Usage with Scade One",
        "section": "Usage with Scade One",
        "text": "The tool, run through the Command Line Interface, launches swan-cg with a\nconfiguration, builds the corresponding DLL, and generates the Python proxy\nfor the DLL.\nThe syntax of the configuration file is provided in the\nJSON Schema Syntax of Code Generator Configuration File\nsection of the user documentation.\nHowever, it is easier to derive the configuration file from a template,\nconfig.json, you obtain with a Code Generator job:\nCreate your configuration file from the template and edit it with\nrespect to your model. For example:\nThe tool has the following parameters:\nYou must set the S_ONE_HOME environment variable to the installation of Scade One\nto consider, for example:\nset S_ONE_HOME=C:\\Program Files\\ANSYS Inc\\v242\\Scade One\nThe Scade One project is only used to access the resources for imported code.\nFor now, the wrapper supports only header files, for imported types and macros.\nOnce the package is installed in a Python 3.10 environment, that can be\nvirtual, the tool can be run using three different modes.\nFor example:\nThis produces my_module.dll and my_module.py.\n{\n    \"files\": [\n        \"../PyBox/assets/P.swan\",\n        \"../PyBox/assets/P.swani\",\n        \"../stdlib/assets/stdlib.swan\"\n    ],\n    \"roots\": [\n        \"P::Root\"\n    ],\n    \"target_dir\": \".\",\n    \"target\": \"C\",\n    \"name_length\": 200,\n    \"significance_length\": 31\n}\nusage: swanpython.py [-h] [-v] -n <name> [-p <project>] [-a] [--size <swan_size>] [--false <swan_false>]\n                     [--true <swan_true>] [--no_cg]\n                     cmdjson\n\nScade One Python Proxy\n\npositional arguments:\n  cmdjson               swan code gen settings file\n\noptions:\n  -h, --help            show this help message and exit\n  -v, --version         display the version\n  -n <name>, --name <name>\n                        name of the output python module\n  -p <project>, --project <project>\n                        Swan project file (*.sproj)\n  -a, --all             force rebuild\n  --size <swan_size>    type of swan_size\n  --false <swan_false>  value of swan_false\n  --true <swan_true>    value of swan_true\n  --no_cg               do not run swan_cg\n> python .../lib/site_packages/ansys/scade/python_wrapper/swanpython.py -n my_module cmd.json\n> python -m ansys.scade.python_wrapper.swanpython -n my_module cmd.json\n> ansys_scade_python_wrapper_swanpython.exe -n my_module cmd.json"
    },
    {
        "objectID": "usage/swancg",
        "href": "usage/swancg.html#configuration",
        "title": "Usage with Scade One > Configuration",
        "section": "Configuration",
        "text": "The syntax of the configuration file is provided in the\nJSON Schema Syntax of Code Generator Configuration File\nsection of the user documentation.\nHowever, it is easier to derive the configuration file from a template,\nconfig.json, you obtain with a Code Generator job:\nCreate your configuration file from the template and edit it with\nrespect to your model. For example:\n{\n    \"files\": [\n        \"../PyBox/assets/P.swan\",\n        \"../PyBox/assets/P.swani\",\n        \"../stdlib/assets/stdlib.swan\"\n    ],\n    \"roots\": [\n        \"P::Root\"\n    ],\n    \"target_dir\": \".\",\n    \"target\": \"C\",\n    \"name_length\": 200,\n    \"significance_length\": 31\n}"
    },
    {
        "objectID": "usage/swancg",
        "href": "usage/swancg.html#command-line-interface",
        "title": "Usage with Scade One > Command Line Interface",
        "section": "Command Line Interface",
        "text": "The tool has the following parameters:\nYou must set the S_ONE_HOME environment variable to the installation of Scade One\nto consider, for example:\nset S_ONE_HOME=C:\\Program Files\\ANSYS Inc\\v242\\Scade One\nThe Scade One project is only used to access the resources for imported code.\nFor now, the wrapper supports only header files, for imported types and macros.\nOnce the package is installed in a Python 3.10 environment, that can be\nvirtual, the tool can be run using three different modes.\nFor example:\nThis produces my_module.dll and my_module.py.\nusage: swanpython.py [-h] [-v] -n <name> [-p <project>] [-a] [--size <swan_size>] [--false <swan_false>]\n                     [--true <swan_true>] [--no_cg]\n                     cmdjson\n\nScade One Python Proxy\n\npositional arguments:\n  cmdjson               swan code gen settings file\n\noptions:\n  -h, --help            show this help message and exit\n  -v, --version         display the version\n  -n <name>, --name <name>\n                        name of the output python module\n  -p <project>, --project <project>\n                        Swan project file (*.sproj)\n  -a, --all             force rebuild\n  --size <swan_size>    type of swan_size\n  --false <swan_false>  value of swan_false\n  --true <swan_true>    value of swan_true\n  --no_cg               do not run swan_cg\n> python .../lib/site_packages/ansys/scade/python_wrapper/swanpython.py -n my_module cmd.json\n> python -m ansys.scade.python_wrapper.swanpython -n my_module cmd.json\n> ansys_scade_python_wrapper_swanpython.exe -n my_module cmd.json"
    },
    {
        "objectID": "usage/proxy",
        "href": "usage/proxy.html#python-proxy",
        "title": "Python proxy",
        "section": "Python proxy",
        "text": "The structure of the Python proxy is identical for both SCADE Suite\nand Scade One models.\nThe Python module defines:\nA class per structure used in the interfaces of the root operators.\nThese classes derive from ctypes.Structure.\nA global variable sensors with one read/write property per sensor in the\nmodel.\nA class per root operator which defines:\nOne read/write property per input\nOne read-only property per output\nTwo functions to address the C code:\ncall_reset(self) -> None\ncall_cycle(self, cycles: int = 1, refresh: bool = True, debug: bool = False) -> None\nThe refresh and debug parameters are used for SCADE Suite co-simulation.\nThe python module’s usage is straightforward:\nCreate an instance of a root operator.\nCall its reset function.\nLoop:\nSet the sensors\nSet the inputs\nCall the cyclic function\nGet the outputs\nThe script hereafter example is an example of client for the following model:\nScalar values: Use Python literals\nComplex Values: Use ctypes literals\nConsider the following types:\nOK\nNOK\nPossible enhancement: Support Python arrays and dictionaries for read/write access.\nThe wrapper does not support for now the input_threshold and\nglobal_context KCG options.\n# py_box.py/py_box.dll are produced from PyBox.etp\nimport py_box\n# set the sensors\n# P::offset: float64\npy_box.sensors.offset = 0.5\n# create an instance of the root operator P::Root\nroot = py_box.Root()\n# and reset it\nroot.call_reset()\n# set the inputs\n# P::Root/c: bool\nroot.c = True\n# P::Root/v: Speed (defined as float64 ^ 3)\nroot.v = (1.0, 2.0, 3.0)\n# P::Root/v: float64\nroot.dt = 0.1\nfor cycle in range(4):\n    # P::Root/i: int32\n    root.i = cycle + 1\n    # call the cyclic function\n    root.call_cycle()\n    # print the results\n    # P::Root/pos: Position\n    print(root.o, root.pos.x, root.pos.y, root.pos.z)\n    # P::Root/c: bool\n    root.c = False\nroot.valid = True\nroot.array[0] = 3.14\nroot.points[2].x = 0\nroot.array = (ctypes.double*3)([3, 1, 4])\nroot.points[2] = CPosition_P(x=1, y=2, z=3)\nroot.array = [3, 1, 4]\nroot.points[2] = {\"x\": 1, \"y\": 2, \"z\": 3}"
    },
    {
        "objectID": "usage/proxy",
        "href": "usage/proxy.html#example",
        "title": "Python proxy > Example",
        "section": "Example",
        "text": "The python module’s usage is straightforward:\nCreate an instance of a root operator.\nCall its reset function.\nLoop:\nSet the sensors\nSet the inputs\nCall the cyclic function\nGet the outputs\nThe script hereafter example is an example of client for the following model:\n# py_box.py/py_box.dll are produced from PyBox.etp\nimport py_box\n# set the sensors\n# P::offset: float64\npy_box.sensors.offset = 0.5\n# create an instance of the root operator P::Root\nroot = py_box.Root()\n# and reset it\nroot.call_reset()\n# set the inputs\n# P::Root/c: bool\nroot.c = True\n# P::Root/v: Speed (defined as float64 ^ 3)\nroot.v = (1.0, 2.0, 3.0)\n# P::Root/v: float64\nroot.dt = 0.1\nfor cycle in range(4):\n    # P::Root/i: int32\n    root.i = cycle + 1\n    # call the cyclic function\n    root.call_cycle()\n    # print the results\n    # P::Root/pos: Position\n    print(root.o, root.pos.x, root.pos.y, root.pos.z)\n    # P::Root/c: bool\n    root.c = False"
    },
    {
        "objectID": "usage/proxy",
        "href": "usage/proxy.html#access-to-values",
        "title": "Python proxy > Access to values",
        "section": "Access to values",
        "text": "Scalar values: Use Python literals\nComplex Values: Use ctypes literals\nConsider the following types:\nOK\nNOK\nPossible enhancement: Support Python arrays and dictionaries for read/write access.\nroot.valid = True\nroot.array[0] = 3.14\nroot.points[2].x = 0\nroot.array = (ctypes.double*3)([3, 1, 4])\nroot.points[2] = CPosition_P(x=1, y=2, z=3)\nroot.array = [3, 1, 4]\nroot.points[2] = {\"x\": 1, \"y\": 2, \"z\": 3}"
    },
    {
        "objectID": "usage/proxy",
        "href": "usage/proxy.html#limitations",
        "title": "Python proxy > Limitations",
        "section": "Limitations",
        "text": "The wrapper does not support for now the input_threshold and\nglobal_context KCG options."
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#release-notes",
        "title": "Release notes",
        "section": "Release notes",
        "text": "This document contains the release notes for the project.\nfix: Fix the path of the registered scripts #7\nfeat: Migrate the original repository to GitHub #1\nfix: Minor issues #5\nBump the dependencies group with 4 updates #3\nBump the actions group with 2 updates #2\nci: Activate the unit tests #4"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#201---2024-10-10",
        "title": "Release notes > 2.0.1 - 2024-10-10",
        "section": "2.0.1 - 2024-10-10",
        "text": "fix: Fix the path of the registered scripts #7"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: Fix the path of the registered scripts #7"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#200---2024-10-10",
        "title": "Release notes > 2.0.0 - 2024-10-10",
        "section": "2.0.0 - 2024-10-10",
        "text": "feat: Migrate the original repository to GitHub #1\nfix: Minor issues #5\nBump the dependencies group with 4 updates #3\nBump the actions group with 2 updates #2\nci: Activate the unit tests #4"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#added",
        "title": "Release notes > Added",
        "section": "Added",
        "text": "feat: Migrate the original repository to GitHub #1"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#fixed",
        "title": "Release notes > Fixed",
        "section": "Fixed",
        "text": "fix: Minor issues #5"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#dependencies",
        "title": "Release notes > Dependencies",
        "section": "Dependencies",
        "text": "Bump the dependencies group with 4 updates #3"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#maintenance",
        "title": "Release notes > Maintenance",
        "section": "Maintenance",
        "text": "Bump the actions group with 2 updates #2\nci: Activate the unit tests #4"
    }
]